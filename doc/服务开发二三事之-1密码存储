草稿

1. 用户的密码以明文的形式存储。这种方式不能使用，后果参考 CSDN密码泄漏事件。
2. 用户的密码以可逆加密的方式存储。这种方式不能使用。
3. 采用单向不可逆加密。比如 MD5、SHA1、SHA2 等加密存储。这种方式也不可取，可以通过rainbow table 进行破解。
4. 仍然采用单向不可逆加密，但是需要先对密码进行加盐操作。这种方式理论上仍然可以被rainbow table 破解，但是所耗费的计算和内存已经足够大。
    目前也是大家通用的做法。
5. 仍然采用单向不可可逆加密，但是增加密码计算的资源和时间。 通常有三种方式。
    1）PBKDF2
        将salted hash进行多次重复计算，这个次数是可选择的。
    2） bcrypt
        bcrypt是专门为密码存储而设计的算法，基于Blowfish加密算法变形而来，由Niels Provos和David Mazières发表于1999年的USENIX。　
        bcrypt最大的好处是有一个参数（work factor)，可用于调整计算强度，而且work factor是包括在输出的摘要中的.
        bcrypt经过了很多安全专家的仔细分析，使用在以安全著称的OpenBSD中，
        一般认为它比PBKDF2更能承受随着计算能力加强而带来的风险。
        http://www.openwall.com/crypt/
        https://github.com/rg3/libbcrypt
    3）scrypt
        scrypt不仅计算所需时间长，而且占用的内存也多，使得并行计算多个摘要异常困难，因此利用rainbow table进行暴力攻击更加困难。
    这些方案都是将rainbow table 破解的代价提高到足够大，以至于根本无法破解。这种安全是最高的，
    但是耗费更多的内存和计算，一般用于保密级别非常高的场景。
    如果需要，建议采用bcrypt方案。

需要知道的概念
    1. 安全散列算法 如 SHA家族, MD5已经有碰撞例子了, 参考gtest_md5.cpp, 所以，尽量避免使用MD5, 可以使用SHA256
    2. rainbow table（彩虹表）
